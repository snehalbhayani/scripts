# all the imports
import sys
import rethinkdb as r
from rethinkdb import RqlRuntimeError
from flask import Flask, request, session, g, redirect, url_for, \
     abort, render_template, flash,jsonify
import traceback

# configuration
DATABASE = 'lagrammar'
HOSTNAME='localhost'

# create our little application :)
app = Flask(__name__)
app.config.from_object(__name__)

# Connect to the rethinkdb database server
def connect_db():
    r.connect('localhost', 28015).repl()


# Create a database with the specified name if it doesn't exist
def create_db(db_name):
    try:
        connect_db()
        r.db_create(db_name).run()
        return True
    except RqlRuntimeError:
        print('The database'+ str(db_name) + ' already exists.')
        return True
    except :
        return False                

# Create the table with the name specified in the specified database, if it doesn't exist.
def create_table(table_name,db_name):
    if( create_db(db_name)):
        try:    
            r.db(db_name).table_create(table_name).run()
            return True
        except RqlRuntimeError:
            print('The table'+str(table_name)+' already exists.')
            return True
        except:
            print(traceback.format_exc())        
            return False
    else:
        return False
    

# Display the form that accepts the word and the button for looking up information about the word from the wordnet.
@app.route('/v1.0/wordnet/')
def display_form():
    return render_template('form_for_word.html')
    
    


@app.route('/v1.0/wordnet/lookup',methods=['GET','POST'])
def lookup_words():
    print('Creating/touching the database and the table')
    create_table('wordnet','lagrammar')
    word=request.form['word']
    print('Looking up the word : '+word + '.')
    try:
        word_analysis= r.db('lagrammar').table('wordnet').filter({'word':word}).run()
        details=word_analysis.next()
        print (details)
    except RqlCursorEmpty:
        print( 'The word does not exist in the database. :( ')
    except:
        print(traceback.format_exc())
    return render_template('form_for_details.html',details=details)
    
    

    

# In case we want to run the app on a standalone basis
if __name__ == '__main__':
    app.run()
